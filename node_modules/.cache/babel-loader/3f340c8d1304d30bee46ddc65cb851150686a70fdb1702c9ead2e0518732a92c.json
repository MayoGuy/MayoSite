{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMCS\\\\Desktop\\\\React-test\\\\myapp\\\\src\\\\helpers.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from 'react-modal';\nimport Slider from 'react-slider';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DropdownMenu({\n  options,\n  value,\n  onChange\n}) {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleOptionClick = option => {\n    onChange(option);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-button\",\n      onClick: handleClick,\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-menu\",\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-option\",\n        onClick: () => handleOptionClick(option),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n_s(DropdownMenu, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = DropdownMenu;\nfunction Configurations(onSave, sliderColor) {\n  _s2();\n  let subtitle;\n  const [isOpen, setIsOpen] = useState(false);\n  const [color, setColor] = useState('#228B22');\n  const [speed, setSpeed] = useState(0.50);\n  const [size, setSize] = useState('Small');\n  function openModal() {\n    setIsOpen(true);\n  }\n  function afterOpenModal() {\n    subtitle.style.color = '#f00';\n  }\n  function closeModal() {\n    setIsOpen(false);\n  }\n  function closeAndSave() {\n    onSave(color, speed, size);\n    closeModal();\n  }\n  const colors = ['#228B22', '#7F1734', '#87CEEB', '#FFFF00', '#E6E6FA', '#CC5500'];\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    style: customStyles,\n    className: \"modal\",\n    onAfterOpen: afterOpenModal,\n    onRequestClose: closeModal,\n    contentLabel: \"Configurations\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Configurations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"config-text\",\n      children: \"Choose color:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"colors-container\",\n      children: colors.map((c, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-choice\",\n        style: {\n          backgroundColor: c,\n          borderColor: sliderColor === c ? null : white\n        },\n        onClick: () => setColor(c)\n      }, c, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 39\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"config-text\",\n      children: \"Animation speed:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      className: \"slider\",\n      value: speed,\n      color: sliderColor,\n      onChange: setSpeed,\n      orientation: \"horizontal\",\n      min: 0.00,\n      max: 1.00,\n      step: 0.01\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"config-text\",\n      children: \"Board Size:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size-container\",\n      children: /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        options: ['Small', 'Medium', 'Large', 'Extra Large'],\n        value: size,\n        onChange: setSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"config-button\",\n      onClick: closeAndSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s2(Configurations, \"oNdDdxhtFBTH3QzoTeymAsSSq6o=\");\n_c2 = Configurations;\nfunction Timer() {\n  _s3();\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (seconds === 59) {\n        setMinutes(minutes => minutes + 1);\n        setSeconds(0);\n      } else {\n        setSeconds(seconds => seconds + 1);\n      }\n    }, 1000); // Update every 1 second\n\n    return () => clearInterval(intervalId); // Cleanup function\n  }, []); // Empty dependency array: run effect only once on mount\n\n  const formatTime = value => {\n    return value.toString().padStart(2, '0'); // Pad with leading zeros\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), formatTime(minutes), \":\", formatTime(seconds)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n}\n_s3(Timer, \"lDz18iep09y+bhBUDK33hPjXs38=\");\n_c3 = Timer;\nexport { DropdownMenu, Configurations, Timer };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DropdownMenu\");\n$RefreshReg$(_c2, \"Configurations\");\n$RefreshReg$(_c3, \"Timer\");","map":{"version":3,"names":["React","useState","Modal","Slider","useEffect","jsxDEV","_jsxDEV","DropdownMenu","options","value","onChange","_s","isOpen","setIsOpen","handleClick","handleOptionClick","option","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","Configurations","onSave","sliderColor","_s2","subtitle","color","setColor","speed","setSpeed","size","setSize","openModal","afterOpenModal","style","closeModal","closeAndSave","colors","customStyles","onAfterOpen","onRequestClose","contentLabel","c","i","backgroundColor","borderColor","white","orientation","min","max","step","_c2","Timer","_s3","minutes","setMinutes","seconds","setSeconds","intervalId","setInterval","clearInterval","formatTime","toString","padStart","_c3","$RefreshReg$"],"sources":["C:/Users/AMCS/Desktop/React-test/myapp/src/helpers.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport Modal from 'react-modal';\r\nimport Slider from 'react-slider'\r\nimport { useEffect } from 'react'; \r\n\r\nfunction DropdownMenu({ options, value, onChange}) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const handleOptionClick = (option) => {\r\n        onChange(option);\r\n        setIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dropdown\">\r\n            <div className=\"dropdown-button\" onClick={handleClick}>\r\n                {value}\r\n            </div>\r\n            {isOpen && (\r\n                <div className=\"dropdown-menu\">\r\n                    {options.map((option) => (\r\n                        <div\r\n                            className=\"dropdown-option\"\r\n                            key={option}\r\n                            onClick={() => handleOptionClick(option)}\r\n                        >\r\n                            {option}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Configurations (onSave, sliderColor) {\r\n    let subtitle\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [color, setColor] = useState('#228B22')\r\n    const [speed, setSpeed] = useState(0.50)\r\n    const [size, setSize] = useState('Small')\r\n\r\n    function openModal() {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function afterOpenModal() {\r\n    subtitle.style.color = '#f00';\r\n    }\r\n\r\n    function closeModal() {\r\n    setIsOpen(false);\r\n    }\r\n\r\n    function closeAndSave() {\r\n        onSave(color, speed, size)\r\n        closeModal()\r\n    }\r\n    const colors = ['#228B22', '#7F1734', '#87CEEB', '#FFFF00', '#E6E6FA', '#CC5500']\r\n    return (\r\n        <Modal isOpen={isOpen} style={customStyles} className=\"modal\" onAfterOpen={afterOpenModal} onRequestClose={closeModal} contentLabel=\"Configurations\">\r\n            <h4>Configurations</h4>\r\n            <p className='config-text'>Choose color:</p>\r\n            <div className='colors-container'>\r\n                {colors.map((c, i) => <div className='color-choice' key={c} style={{backgroundColor: c, borderColor: sliderColor===c ? null : white}} onClick={() => setColor(c)}></div>)}\r\n            </div>\r\n            <p className='config-text'>Animation speed:</p>\r\n            <Slider\r\n                className='slider'\r\n                value={speed}\r\n                color={sliderColor}\r\n                onChange={setSpeed}\r\n                orientation=\"horizontal\"\r\n                min={0.00}\r\n                max={1.00}\r\n                step={0.01}\r\n            ></Slider>\r\n            <p className='config-text'>Board Size:</p>\r\n            <div className=\"size-container\">\r\n                <DropdownMenu options={['Small', 'Medium', 'Large', 'Extra Large']} value={size} onChange={setSize}></DropdownMenu>\r\n            </div>\r\n            <button className='config-button' onClick={closeAndSave}>Save</button>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nfunction Timer() {\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [seconds, setSeconds] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      const intervalId = setInterval(() => {\r\n        if (seconds === 59) {\r\n          setMinutes(minutes => minutes + 1);\r\n          setSeconds(0);\r\n        } else {\r\n          setSeconds(seconds => seconds + 1);\r\n        }\r\n      }, 1000); // Update every 1 second\r\n  \r\n      return () => clearInterval(intervalId); // Cleanup function\r\n    }, []); // Empty dependency array: run effect only once on mount\r\n  \r\n    const formatTime = (value) => {\r\n      return value.toString().padStart(2, '0'); // Pad with leading zeros\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Modal></Modal>\r\n          {formatTime(minutes)}:{formatTime(seconds)}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport {DropdownMenu, Configurations, Timer}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}