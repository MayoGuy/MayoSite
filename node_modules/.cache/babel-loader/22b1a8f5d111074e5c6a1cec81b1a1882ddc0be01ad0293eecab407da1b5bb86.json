{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMCS\\\\Desktop\\\\React-test\\\\myapp\\\\src\\\\minesweeper.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport flag from './flag.svg';\nimport bomb from './bomb.svg';\nimport refresh from './refresh.svg';\nimport config from './hamburger.svg';\nimport { Timer, Configurations } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Square(props) {\n  const sq = props.square;\n  let val = sq.value;\n\n  // Empty cell when value is 0 or is an Image\n  if (sq.value === 0) {\n    val = '';\n  }\n  let img = sq.flag ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: flag\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 25\n  }, this) : null;\n  if (sq.open && sq.value === 'X') {\n    img = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bomb\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }, this);\n    val = '';\n  }\n\n  // Animation handling\n  let block = sq.open ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block top-part disappeared\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block top-part\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 81\n  }, this);\n  if (sq.open && !sq.animationed) {\n    block = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block top-part disappear\",\n      onAnimationEnd: props.animationHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this);\n  }\n\n  // Flagging\n  const handler = e => {\n    e.preventDefault();\n    props.onContextMenu();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    onContextMenu: handler,\n    children: [img, block, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block val\",\n      children: val\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_c = Square;\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    // Making sure the animations don't run again\n    this.handleAnimationEnd = (e, x, y) => {\n      this.setState(prevState => {\n        const squares = prevState.squares.map(row => row.slice());\n        squares[y][x] = {\n          ...squares[y][x],\n          animationed: true\n        };\n        return {\n          squares\n        };\n      });\n      e.target.classList.remove('disappear');\n      e.target.classList.remove('top-part');\n    };\n    // reset board, duh\n    this.resetBoard = () => {\n      this.setState({\n        squares: this.state.squares.map(row => row.map(() => ({\n          value: 0,\n          open: false,\n          flag: false,\n          animationed: false\n        }))),\n        firstClick: false,\n        gameEnd: false,\n        flags: 0,\n        win: false\n      });\n    };\n    this.state = {\n      squares: Array.from({\n        length: this.props.box\n      }, () => Array(this.props.box).fill({\n        value: 0,\n        flag: false,\n        open: false,\n        animationed: false\n      })),\n      // Generating an Array\n      firstClick: false,\n      mines: this.props.mines,\n      flags: 0,\n      win: false,\n      gameEnd: false\n    };\n  }\n\n  // Resetting the board, on configurations save\n  static getDerivedStateFromProps(props, state) {\n    if (props.box !== state.squares.length) {\n      return {\n        squares: Array.from({\n          length: props.box\n        }, () => Array(props.box).fill({\n          value: 0,\n          flag: false,\n          open: false,\n          animationed: false\n        })),\n        firstClick: false,\n        mines: props.mines,\n        flags: 0,\n        win: false,\n        gameEnd: false\n      };\n    }\n    return null;\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.state.win) this.checkWin();\n  }\n\n  // Converting from 1D to 2D\n  toXY(num) {\n    return [num % this.props.box, Math.floor(num / this.props.box)];\n  }\n\n  // Get surrounding cells, and filter out cells that are out of bounds\n  getNeighbours(x, y) {\n    var cells = [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1], [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]];\n    return cells.filter(cell => cell[0] >= 0 && cell[0] < this.props.box && cell[1] >= 0 && cell[1] < this.props.box);\n  }\n  checkWin() {\n    for (let i = 0; i < this.state.squares.length; i++) {\n      for (let j = 0; j < this.state.squares[i].length; j++) {\n        if (!this.state.squares[i][j].open && this.state.squares[i][j].value !== 'X') {\n          return;\n        }\n      }\n    }\n    this.setState({\n      gameEnd: true\n    });\n    this.setState({\n      win: true\n    });\n  }\n\n  // Randomly place mines on the board\n  createMines(first) {\n    var mines = [];\n    while (mines.length < this.state.mines) {\n      var r = Math.floor(Math.random() * Math.pow(this.props.box, 2));\n      if (mines.indexOf(r) === -1 && r !== first) mines.push(r);\n    }\n    this.setState(prevState => {\n      const squares = prevState.squares.map(row => row.slice());\n      for (let i = 0; i < mines.length; i++) {\n        let [x, y] = this.toXY(mines[i]);\n        squares[y][x] = {\n          ...squares[y][x],\n          value: 'X'\n        };\n      }\n      return {\n        squares\n      };\n    }, this.createNums);\n  }\n\n  // Count number of mines around each cell\n  createNums() {\n    this.setState(prevState => {\n      const squares = prevState.squares.map(row => row.slice());\n      for (let x = 0; x < this.props.box; x++) {\n        for (let y = 0; y < this.props.box; y++) {\n          if (squares[y][x].value === 'X') {\n            let cells = this.getNeighbours(x, y);\n            for (let j = 0; j < cells.length; j++) {\n              let [xt, yt] = cells[j];\n              if (squares[yt][xt].value !== 'X') {\n                squares[yt][xt] = {\n                  ...squares[yt][xt],\n                  value: squares[yt][xt].value + 1\n                };\n              }\n            }\n          }\n        }\n      }\n      return {\n        squares\n      };\n    });\n  }\n\n  // Square click handler\n  handleClick(x, y) {\n    if (this.state.gameEnd) return;\n    if (!this.state.firstClick) {\n      // Making sure first click is not a mine\n      this.createMines(y * this.props.box + x);\n      this.setState({\n        firstClick: true\n      }, () => this.handleClick(x, y));\n      return;\n    }\n    if (!this.state.squares[y][x].open && !this.state.squares[y][x].flag) {\n      this.setState(prevState => {\n        if (prevState.squares[y][x].value === 'X') {\n          // Boom\n          this.setState({\n            gameEnd: true\n          });\n          this.bombClick(x, y);\n          return;\n        }\n        const squares = prevState.squares.map(row => row.slice());\n        squares[y][x] = {\n          ...squares[y][x],\n          open: true\n        };\n        return {\n          squares\n        };\n      }, () => {\n        if (this.state.squares[y][x].value === 0) {\n          this.openSquares(x, y);\n        }\n      });\n    } else if (this.state.squares[y][x].open) {\n      this.openFlagNeighbours(x, y);\n    }\n  }\n\n  //Flagging the cells\n  handleRightClick(x, y) {\n    if (this.state.gameEnd) return;\n    if (this.state.squares[y][x].open) return;\n    this.setState(prevState => {\n      const squares = prevState.squares.map(row => row.slice());\n      const flagged = !squares[y][x].flag;\n      if (flagged) this.setState({\n        flags: prevState.flags + 1\n      });else this.setState({\n        flags: prevState.flags - 1\n      });\n      squares[y][x] = {\n        ...squares[y][x],\n        flag: squares[y][x].open ? !flagged : flagged\n      };\n      return {\n        squares\n      };\n    });\n    return false;\n  }\n  // Open cells around a flagged cell\n  openFlagNeighbours(x, y) {\n    const val = this.state.squares[y][x].value;\n    var cells = this.getNeighbours(x, y);\n    let flagnums = 0;\n    cells.forEach(cell => {\n      if (this.state.squares[cell[1]][cell[0]].flag) {\n        flagnums++;\n      }\n    });\n    if (flagnums === val) {\n      cells.forEach(cell => {\n        if (!this.state.squares[cell[1]][cell[0]].open && !this.state.squares[cell[1]][cell[0]].flag) {\n          this.handleClick(cell[0], cell[1]);\n        }\n      });\n    }\n  }\n\n  // Open all exposed empty cells in the board\n  openSquares(x, y) {\n    const squares = this.state.squares.map(row => row.slice());\n    const queue = [[x, y]];\n    const visited = Array.from({\n      length: this.props.box\n    }, () => Array(this.props.box).fill(false));\n    while (queue.length > 0) {\n      const [currentX, currentY] = queue.shift();\n      const currentSquare = squares[currentY][currentX];\n      if (visited[currentY][currentX] || currentSquare.flag || currentSquare.value === 'X') {\n        continue;\n      }\n      visited[currentY][currentX] = true;\n      squares[currentY][currentX] = {\n        ...currentSquare,\n        open: true\n      };\n      console.log(currentSquare.value);\n      if (currentSquare.value === 0) {\n        console.log(\"que shift\");\n        const neighbours = this.getNeighbours(currentX, currentY);\n        queue.push(...neighbours.filter(([newX, newY]) => !visited[newY][newX] && !squares[newY][newX].open && !squares[newY][newX].flag && squares[newY][newX].value !== 'X'));\n      }\n    }\n    this.setState({\n      squares\n    });\n  }\n\n  // Game ending animation, bombs opening randially outward\n  bombClick(x, y) {\n    let bombs = [];\n    const squares = this.state.squares.map(row => row.slice());\n    for (let i = 0; i < this.props.box; i++) {\n      for (let j = 0; j < this.props.box; j++) {\n        if (squares[i][j].value === 'X' && !squares[i][j].flag) {\n          if (i === y && j === x) {\n            continue;\n          }\n          bombs.push([i, j]);\n        }\n      }\n    }\n    squares[y][x].open = true;\n    squares[y][x].animationed = true;\n    this.setState({\n      squares: squares\n    });\n    bombs.sort((point1, point2) => {\n      const distance1 = this.calculateDistance(point1, [y, x]);\n      const distance2 = this.calculateDistance(point2, [y, x]);\n      return distance1 - distance2;\n    });\n    this.openBombWithDelay(bombs, squares);\n  }\n\n  // Euclidian distance formula\n  calculateDistance(point1, point2) {\n    const dx = point1[0] - point2[0];\n    const dy = point1[1] - point2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // Game ending animation\n  openBombWithDelay(bombs, squarecopy) {\n    if (bombs.length === 0) {\n      return;\n    }\n    setTimeout(() => {\n      const [x, y] = bombs[0];\n      bombs.splice(0, 1);\n      squarecopy[x][y].open = true;\n      squarecopy[x][y].animationed = true;\n      this.setState({\n        squares: squarecopy\n      });\n      document.querySelector('.board').classList.add('shake');\n      setTimeout(() => {\n        document.querySelector('.board').classList.remove('shake');\n      }, 100);\n      this.openBombWithDelay(bombs, squarecopy);\n    }, 100);\n  }\n  // Rendering the board\n  renderSquare(x, y) {\n    const square = this.state.squares[y][x];\n    return /*#__PURE__*/_jsxDEV(Square, {\n      square: square,\n      animationHandler: e => this.handleAnimationEnd(e, x, y),\n      onClick: () => this.handleClick(x, y),\n      onContextMenu: () => this.handleRightClick(x, y)\n    }, `${x}-${y}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this);\n  }\n  render() {\n    const rows = [];\n    for (let i = 0; i < this.props.box; i++) {\n      const cols = [];\n      for (let j = 0; j < this.props.box; j++) {\n        cols.push(this.renderSquare(j, i));\n      }\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: cols\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this));\n    }\n    const pause = !this.state.firstClick || this.state.gameEnd;\n    const reset = this.state.firstClick;\n    let status = this.state.win ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"win\",\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 39\n    }, this) : \" \";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [status, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-data\",\n        children: [/*#__PURE__*/_jsxDEV(Timer, {\n          pause: pause,\n          reset: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-fs\",\n          children: [\"Mines: \", this.state.mines, \" | Flags: \", this.state.flags]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: refresh,\n          alt: \"refresh\",\n          className: \"refresh\",\n          onClick: this.resetBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"board\",\n        children: [rows, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }, this), status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this);\n  }\n}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSave = (color, speed, size) => {\n      if (size !== this.state.size) {\n        let ssize, box, mines;\n        switch (size) {\n          case 'Small':\n            ssize = '50px';\n            box = 8;\n            mines = 10;\n            break;\n          case 'Medium':\n            ssize = '40px';\n            box = 15;\n            mines = 25;\n            break;\n          case 'Large':\n            ssize = '30px';\n            box = 25;\n            mines = 75;\n            break;\n          default:\n            ssize = 50;\n        }\n        this.setState({\n          size: size,\n          box: box,\n          mines: mines\n        });\n        document.documentElement.style.setProperty('--size', ssize);\n      }\n      document.documentElement.style.setProperty('--color', color);\n      document.documentElement.style.setProperty('--speed', speed + 's');\n      this.setState({\n        color,\n        speed,\n        size\n      });\n      this.setState({\n        open: false\n      });\n    };\n    this.onClosed = () => {\n      this.setState({\n        open: false\n      });\n    };\n    this.state = {\n      size: 'Small',\n      color: '#228B22',\n      speed: 0.5,\n      box: 8,\n      mines: 10,\n      open: false\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"config-button\",\n        onClick: () => this.setState({\n          open: true\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: config,\n          alt: \"config\",\n          className: \"config-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), this.state.open ? /*#__PURE__*/_jsxDEV(Configurations, {\n        onSave: this.onSave,\n        sliderColor: this.state.color,\n        opened: this.state.open,\n        onClosed: this.onClosed,\n        dcolor: this.state.color,\n        dspeed: this.state.speed,\n        dsize: this.state.size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 36\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"MINESWEEPER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        box: this.state.box,\n        mines: this.state.mines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// ========================================\n\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","ReactDOM","flag","bomb","refresh","config","Timer","Configurations","jsxDEV","_jsxDEV","Square","props","sq","square","val","value","img","src","fileName","_jsxFileName","lineNumber","columnNumber","open","block","className","animationed","onAnimationEnd","animationHandler","handler","e","preventDefault","onContextMenu","onClick","children","_c","Board","Component","constructor","handleAnimationEnd","x","y","setState","prevState","squares","map","row","slice","target","classList","remove","resetBoard","state","firstClick","gameEnd","flags","win","Array","from","length","box","fill","mines","getDerivedStateFromProps","componentDidUpdate","prevProps","checkWin","toXY","num","Math","floor","getNeighbours","cells","filter","cell","i","j","createMines","first","r","random","pow","indexOf","push","createNums","xt","yt","handleClick","bombClick","openSquares","openFlagNeighbours","handleRightClick","flagged","flagnums","forEach","queue","visited","currentX","currentY","shift","currentSquare","console","log","neighbours","newX","newY","bombs","sort","point1","point2","distance1","calculateDistance","distance2","openBombWithDelay","dx","dy","sqrt","squarecopy","setTimeout","splice","document","querySelector","add","renderSquare","render","rows","cols","pause","reset","status","alt","class","Game","onSave","color","speed","size","ssize","documentElement","style","setProperty","onClosed","sliderColor","opened","dcolor","dspeed","dsize","$RefreshReg$"],"sources":["C:/Users/AMCS/Desktop/React-test/myapp/src/minesweeper.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport flag from './flag.svg'\r\nimport bomb from './bomb.svg'\r\nimport refresh from './refresh.svg'\r\nimport config from './hamburger.svg'\r\nimport { Timer, Configurations} from './helpers';\r\n\r\n\r\nfunction Square(props) {\r\n    const sq = props.square\r\n    let val = sq.value\r\n\r\n    // Empty cell when value is 0 or is an Image\r\n    if (sq.value === 0) {\r\n        val = ''\r\n    }\r\n    let img = sq.flag ? <img src={flag}></img> : null;\r\n    if (sq.open && sq.value === 'X') {\r\n        img = <img src={bomb}></img>;\r\n        val = ''\r\n    }\r\n\r\n    // Animation handling\r\n    let block = sq.open ? <div className='block top-part disappeared' ></div> : <div className='block top-part' ></div>;\r\n    if (sq.open && !sq.animationed) {\r\n        block = <div className='block top-part disappear' onAnimationEnd={props.animationHandler} ></div>;\r\n    }\r\n\r\n    // Flagging\r\n    const handler = (e) => {\r\n        e.preventDefault();\r\n        props.onContextMenu()\r\n    }\r\n\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick} onContextMenu={handler} >\r\n            {img}\r\n            {block}\r\n            <div className='block val'>{val}</div>\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array.from({ length: this.props.box }, () => Array(this.props.box).fill({ value: 0, flag: false, open: false, animationed: false })), // Generating an Array\r\n            firstClick: false,\r\n            mines: this.props.mines,\r\n            flags: 0,\r\n            win: false,\r\n            gameEnd: false\r\n        };\r\n    }\r\n    \r\n    // Resetting the board, on configurations save\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.box !== state.squares.length) {\r\n            return {\r\n                squares: Array.from({ length: props.box }, () => Array(props.box).fill({ value: 0, flag: false, open: false, animationed: false })),\r\n                firstClick: false,\r\n                mines: props.mines,\r\n                flags: 0,\r\n                win: false,\r\n                gameEnd: false\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (!this.state.win) this.checkWin()\r\n    }\r\n\r\n    // Converting from 1D to 2D\r\n    toXY(num) {\r\n        return [num % this.props.box, Math.floor(num / this.props.box)];\r\n    }\r\n\r\n    // Get surrounding cells, and filter out cells that are out of bounds\r\n    getNeighbours(x, y) {\r\n        var cells = [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1], [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]];\r\n        return cells.filter(cell => cell[0] >= 0 && cell[0] < this.props.box && cell[1] >= 0 && cell[1] < this.props.box);\r\n    }\r\n\r\n    checkWin() {\r\n        for (let i = 0; i < this.state.squares.length; i++) {\r\n            for (let j = 0; j < this.state.squares[i].length; j++) {\r\n                if (!this.state.squares[i][j].open && this.state.squares[i][j].value !== 'X') {\r\n                    return \r\n                }\r\n            }\r\n        }\r\n        this.setState({gameEnd: true})\r\n        this.setState({win: true})\r\n    }\r\n\r\n    // Randomly place mines on the board\r\n    createMines(first) {\r\n        var mines = [];\r\n        while (mines.length < this.state.mines) {\r\n            var r = Math.floor(Math.random() * Math.pow(this.props.box, 2));\r\n            if (mines.indexOf(r) === -1 && r !== first) mines.push(r);\r\n        }\r\n        this.setState(prevState => {\r\n            const squares = prevState.squares.map(row => row.slice());\r\n            for (let i = 0; i < mines.length; i++) {\r\n                let [x, y] = this.toXY(mines[i]);\r\n                squares[y][x] = { ...squares[y][x], value: 'X' };\r\n            }\r\n            return { squares };\r\n        }, this.createNums);\r\n    }\r\n\r\n\r\n    // Count number of mines around each cell\r\n    createNums() {\r\n        this.setState(prevState => {\r\n            const squares = prevState.squares.map(row => row.slice());\r\n            for (let x = 0; x < this.props.box; x++) {\r\n                for (let y = 0; y < this.props.box; y++) {\r\n                    if (squares[y][x].value === 'X') {\r\n                        let cells = this.getNeighbours(x, y);\r\n                        for (let j = 0; j < cells.length; j++) {\r\n                            let [xt, yt] = cells[j];\r\n                            if (squares[yt][xt].value !== 'X') {\r\n                                squares[yt][xt] = { ...squares[yt][xt], value: squares[yt][xt].value + 1 };\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return { squares };\r\n        });\r\n    }\r\n \r\n    // Square click handler\r\n    handleClick(x, y) {\r\n        if (this.state.gameEnd) return; \r\n        if (!this.state.firstClick) {  // Making sure first click is not a mine\r\n            this.createMines(y * this.props.box + x);\r\n            this.setState({ firstClick: true }, () => this.handleClick(x, y));\r\n            return;\r\n        }\r\n        if (!this.state.squares[y][x].open && !this.state.squares[y][x].flag) {\r\n            this.setState(prevState => {\r\n                if (prevState.squares[y][x].value === 'X') { // Boom\r\n                    this.setState({ gameEnd: true });\r\n                    this.bombClick(x, y);\r\n                    return;\r\n                }\r\n                const squares = prevState.squares.map(row => row.slice());\r\n                squares[y][x] = { ...squares[y][x], open: true };\r\n                return { squares };\r\n            }, () => {\r\n                if (this.state.squares[y][x].value === 0) {\r\n                    this.openSquares(x, y);\r\n                }\r\n            });\r\n        } else if (this.state.squares[y][x].open ) {\r\n            this.openFlagNeighbours(x, y);\r\n        }\r\n    }\r\n\r\n    //Flagging the cells\r\n    handleRightClick(x, y) {\r\n        if (this.state.gameEnd) return;\r\n        if (this.state.squares[y][x].open) return;\r\n        this.setState(prevState => {\r\n            const squares = prevState.squares.map(row => row.slice());\r\n            const flagged = !squares[y][x].flag\r\n            if (flagged) this.setState({ flags: prevState.flags + 1 });\r\n            else this.setState({ flags: prevState.flags - 1 });\r\n            squares[y][x] = { ...squares[y][x], flag: squares[y][x].open ? !flagged : flagged };\r\n            return { squares };\r\n        });\r\n        return false;\r\n    }\r\n\r\n    // Making sure the animations don't run again\r\n    handleAnimationEnd = (e, x, y) => {\r\n            this.setState(prevState => {\r\n                const squares = prevState.squares.map(row => row.slice());\r\n                squares[y][x] = { ...squares[y][x], animationed: true };\r\n                return { squares };\r\n            })\r\n            e.target.classList.remove('disappear');\r\n            e.target.classList.remove('top-part');\r\n    };\r\n\r\n    // Open cells around a flagged cell\r\n    openFlagNeighbours(x, y) {\r\n        const val = this.state.squares[y][x].value;\r\n        var cells = this.getNeighbours(x, y);\r\n        let flagnums = 0;\r\n        \r\n        cells.forEach(cell => {\r\n            if (this.state.squares[cell[1]][cell[0]].flag) {\r\n                flagnums++;\r\n            }\r\n        })\r\n        if (flagnums === val) {\r\n            cells.forEach(cell => {\r\n                if (!this.state.squares[cell[1]][cell[0]].open && !this.state.squares[cell[1]][cell[0]].flag) {\r\n                    this.handleClick(cell[0], cell[1]);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Open all exposed empty cells in the board\r\n    openSquares(x, y) {\r\n        const squares = this.state.squares.map(row => row.slice());\r\n        const queue = [[x, y]];\r\n        const visited = Array.from({ length: this.props.box }, () => Array(this.props.box).fill(false));\r\n    \r\n        while (queue.length > 0) {\r\n            const [currentX, currentY] = queue.shift();\r\n            const currentSquare = squares[currentY][currentX];\r\n    \r\n            if (visited[currentY][currentX] || currentSquare.flag || currentSquare.value === 'X') {\r\n                continue;\r\n            }\r\n    \r\n            visited[currentY][currentX] = true;\r\n            squares[currentY][currentX] = { ...currentSquare, open: true };\r\n            console.log(currentSquare.value)\r\n            if (currentSquare.value === 0) {\r\n                console.log(\"que shift\")\r\n                const neighbours = this.getNeighbours(currentX, currentY);\r\n                queue.push(...neighbours.filter(([newX, newY]) => \r\n                    !visited[newY][newX] && !squares[newY][newX].open && !squares[newY][newX].flag && squares[newY][newX].value !== 'X'\r\n                ));\r\n            }\r\n        }\r\n    \r\n        this.setState({ squares });\r\n    }\r\n    \r\n    // Game ending animation, bombs opening randially outward\r\n    bombClick(x, y) {\r\n        let bombs = [];\r\n        const squares = this.state.squares.map(row => row.slice());\r\n        for (let i = 0; i < this.props.box; i++) {\r\n            for (let j = 0; j < this.props.box; j++) {\r\n                if (squares[i][j].value === 'X' && !squares[i][j].flag) {\r\n                    if (i === y && j === x) {\r\n                        continue\r\n                    }\r\n                    bombs.push([i, j]);\r\n                }\r\n            }\r\n        }\r\n        squares[y][x].open = true;\r\n        squares[y][x].animationed = true;\r\n        this.setState({ squares: squares });\r\n        bombs.sort((point1, point2) => {\r\n            const distance1 = this.calculateDistance(point1, [y, x]);\r\n            const distance2 = this.calculateDistance(point2, [y, x]);\r\n            return distance1 - distance2;\r\n        });\r\n        this.openBombWithDelay(bombs, squares);\r\n    }\r\n\r\n    // Euclidian distance formula\r\n    calculateDistance(point1, point2) {\r\n        const dx = point1[0] - point2[0];\r\n        const dy = point1[1] - point2[1];\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    // Game ending animation\r\n    openBombWithDelay(bombs, squarecopy) {\r\n        if (bombs.length===0) {\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            const [ x, y ] = bombs[0];\r\n            bombs.splice(0, 1)\r\n            squarecopy[x][y].open = true;\r\n            squarecopy[x][y].animationed = true;\r\n            this.setState({ squares: squarecopy });\r\n\r\n            document.querySelector('.board').classList.add('shake');\r\n\r\n            setTimeout(() => {\r\n                document.querySelector('.board').classList.remove('shake');\r\n            }, 100);\r\n\r\n            this.openBombWithDelay(bombs, squarecopy);\r\n        }, 100);\r\n    };\r\n\r\n    // Rendering the board\r\n    renderSquare(x, y) {\r\n        const square = this.state.squares[y][x];\r\n        return (\r\n            <Square\r\n                key={`${x}-${y}`}\r\n                square={square}\r\n                animationHandler={(e) => this.handleAnimationEnd(e, x, y)}\r\n                onClick={() => this.handleClick(x, y)}\r\n                onContextMenu={() => this.handleRightClick(x, y)}\r\n            />\r\n        );\r\n    }\r\n\r\n    // reset board, duh\r\n    resetBoard = () => {\r\n        this.setState({\r\n            squares: this.state.squares.map(row => row.map(() => ({ value: 0, open: false, flag: false, animationed: false }))),\r\n            firstClick: false,\r\n            gameEnd: false,\r\n            flags: 0,\r\n            win: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const rows = [];\r\n        for (let i = 0; i < this.props.box; i++) {\r\n            const cols = [];\r\n            for (let j = 0; j < this.props.box; j++) {\r\n                cols.push(this.renderSquare(j, i));\r\n            }\r\n            rows.push(\r\n                <div key={i} className=\"board-row\">\r\n                    {cols}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const pause = !this.state.firstClick || this.state.gameEnd;\r\n        const reset = this.state.firstClick;\r\n\r\n        let status = this.state.win ? <div className='win'>You won!</div> : \" \";\r\n\r\n\r\n        return ( \r\n        <div className=\"game-board\" >\r\n            {status}\r\n            <div className='board-data'>\r\n                <Timer pause={pause} reset={reset}/>\r\n                <div className='m-fs'>Mines: {this.state.mines} | Flags: {this.state.flags}</div>\r\n                <img src={refresh} alt='refresh' className='refresh' onClick={this.resetBoard}/>\r\n            </div>\r\n            <div class = \"board\">{rows} </div>{status}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            size: 'Small',\r\n            color: '#228B22',\r\n            speed: 0.5,\r\n            box: 8,\r\n            mines: 10,\r\n            open: false\r\n        };\r\n    }\r\n\r\n    onSave = (color, speed, size) => {\r\n        if (size !== this.state.size) {\r\n            let ssize, box, mines\r\n            switch (size) {\r\n                case 'Small':\r\n                    ssize = '50px';\r\n                    box = 8\r\n                    mines = 10\r\n                    break;\r\n                case 'Medium':\r\n                    ssize = '40px';\r\n                    box = 15\r\n                    mines = 25\r\n                    break;\r\n                case 'Large':\r\n                    ssize = '30px';\r\n                    box = 25\r\n                    mines = 75\r\n                    break;\r\n                default:\r\n                    ssize = 50;\r\n                \r\n            }\r\n            this.setState({ size: size, box: box, mines: mines });\r\n            document.documentElement.style.setProperty('--size', ssize);\r\n        }\r\n        document.documentElement.style.setProperty('--color', color);\r\n        document.documentElement.style.setProperty('--speed', speed+'s');\r\n        \r\n        this.setState({ color, speed, size });\r\n        this.setState({ open: false });\r\n    }\r\n\r\n    onClosed = () => {\r\n        this.setState({ open: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <button className='config-button' onClick={() => this.setState({ open: true })}>\r\n                    <img src={config} alt='config' className='config-img'></img>\r\n                    </button>\r\n                {this.state.open ? <Configurations onSave={this.onSave} sliderColor={this.state.color} opened={this.state.open} onClosed={this.onClosed} dcolor={this.state.color} dspeed={this.state.speed} dsize={this.state.size}/> : null}\r\n                <h2 className='title'>MINESWEEPER</h2>\r\n                <Board box={this.state.box} mines={this.state.mines}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\n\r\nexport default Game"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}